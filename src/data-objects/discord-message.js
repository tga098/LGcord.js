"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscordMessage = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
const DiscordAPI = __importStar(require("../api/discord-api"));
const Client = require("../lgcord");
const discord_guild_memeber_1 = require("./discord-guild-memeber");
const discord_reaction_1 = __importDefault(require("./discord-reaction"));
const discord_user_1 = require("./discord-user");
const {channel_cache, guild_cache} = require("../client/cache");
class DiscordMessage {
    //     public nonce ? integer or string	used for validating a message was sent
    //     public pinned	boolean	whether this message is pinned
    //     public webhook_id ? snowflake	if the message is generated by a webhook, this is the webhook's id
    //     public type integer	type of message
    //     public activity ? message activity object	sent with Rich Presence - related chat embeds
    //     public application ? partial application object	sent with Rich Presence - related chat embeds
    //     public application_id ? snowflake	if the message is a response to an Interaction, this is the id of the interaction's application
    //     public message_reference ? message reference object	data showing the source of a crosspost, channel follow add, pin, or reply message
    //     public flags ? integer	message flags combined as a bitfield
    //     public referenced_message ?*****	? message object	the message associated with the message_reference
    //     public interaction ? message interaction object	sent if the message is a response to an Interaction
    //     public thread ? channel object	the thread that was started from this message, includes thread member object
    //     public components ? Array of message components	sent if the message contains components like buttons, action rows, or other interactive components
    //     public sticker_items ? array of message sticker item objects	sent if the message contains stickers
    //     public stickers ? array of sticker objects	Deprecated the stickers sent with the message
    constructor(id, channel_id, author, content, timestamp) {
        /**
         * Whether this was a TTS message
         */
        this.tts = false;
        /**
         * Users specifically mentioned in the message
         */
        this.mentions = [];
        this.id = id;
        this.channel_id = channel_id;
        this.author = author;
        this.content = content;
        this.timestamp = timestamp;
    }
    static fromJson(json) {
        const newInst = new DiscordMessage(json.id, json.channel_id, discord_user_1.DiscordUser.fromJson(json.author), json.content, json.timestamp);
        const cd = channel_cache.get(json.channel_id)
        const gd = guild_cache.get(json.guild_id)
        newInst.guild_id = json.guild_id;
        newInst.member = discord_guild_memeber_1.DiscordGuildMember.fromJson(json.member ?? {}, newInst.author);
        newInst.edited_timestamp = json.edited_timestamp;
        newInst.tts = json.tts;
        newInst.channel = cd
        newInst.guild = gd
        newInst.mention_everyone = json.mention_everyone;
        newInst.mentions = json.mentions.map(discord_user_1.DiscordUser.fromJson);
        newInst.reactions = json.reactions?.map(discord_reaction_1.default.fromJson);
        return newInst;
    }
    reply(message) {
        return DiscordAPI.createMessage(this.channel_id, {
            ...message,
            message_reference: {
                message_id: this.id,
                channel_id: this.channel_id,
                guild_id: this.guild_id
            }
        });
    }
    sendMessageInChannel(message) {
        return DiscordAPI.createMessage(this.channel_id, { content: message });
    }
    sendInChannel(message) {
        return DiscordAPI.createMessage(this.channel_id, message);
    }
    edit(message) {
        return DiscordAPI.editMessage(this.channel_id, this.id, message);
    }
    react(emoji) {
        return DiscordAPI.addReaction(this.channel_id, this.id, emoji);
    }
    removeAllReactions() {
        return DiscordAPI.deleteAllReactions(this.channel_id, this.id);
    }
}
exports.DiscordMessage = DiscordMessage;
